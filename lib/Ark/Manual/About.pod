=encoding utf-8

=head1 NAME

Ark::Manual::About - 概要 :: Ark とは

=head1 Ark とは

Ark は perl で書かれたウェブアプリケーションフレームワーク（WAF）です。

Ark はおなじく perl 製のフレームワークである L<Catalyst> を参考に開発されており、その多くの特徴はそのまま引き継いでいます。

そのため Catalyst の経験のある開発者であればすぐに使い始めることができるでしょう。

Catalyst とのいちばんの違いは、Catalyst は実用的に運用するためには基本的に mod_perl や FastCGI など永続的なプロセス実行環境を要求するのに対し、
Ark は CGI でも実用的に動作するという点を重視して開発されています。

もちろん mod_perl/FastCGI でも動作します。

=head1 CGI の利点

現在では perl で中規模以上のサイトを作る場合にはほぼ間違いなく mod_perl もしくは FastCGI を使用して開発するでしょう。

CGI ではパフォーマンスがでないというのもありますし、多くのフレームワークが CGI を使うことを想定していないというのもあるでしょう。

しかし、CGI にも利点があるのです。

mod_perl や FastCGI は高速に動作しますが、それは perl プロセスをあらかじめ起動した状態でリクエストを待ち受けるからです。そのため、リクエストがない場合でも常にメモリを使用します。

CGI の利点はアクセスがない場合には perl プロセスが立ち上がることはないため、必要のないときにはリソースを全く食わないという点にあります。

また、Ark を使用すれば CGI、 mod_perl/FastCGI など動作環境によらず同じコードでアプリケーションを動作させることができるため、
例えば最初はリソースを使わない CGI でサービスを公開し、アクセスが増えてきたら FastCGI に移行する、といったことも簡単に行えます。

=head1 CGI で効率的に動作させるための工夫

=head2 モジュール遅延ロード

CGI の場合、リクエスト毎に perl プロセスを起動します。
一方 FastCGI などの永続的なプロトコルではあらかじめ起動しておいた perl プロセスを複数のリクエストに渡って使い回します。

永続プロセスでは起動時にすべてのモジュールをロードするのが効率的ですが、逆に CGI ではそのリクエストに使用されるモジュールのみをロードするのが効率的です。

Ark では依存モジュールを必要なときになったらロードする遅延ロード方式を採用しています。

そのリクエストで使われるモジュールのみがロードされるため、大きなアプリケーションでも CGI で動作させることが可能になります。

=head2 ディスパッチテーブルキャッシュ

Ark は Catalyst 互換のディスパッチテーブルを持ちますが、この方式ではコントローラをすべてロードしないとディスパッチテーブルを作ることができません。

これでは前述した必要な物だけロードするというポリシーに反するため、Ark ではディスパッチテーブルのキャッシュ機構があります。

初回アクセス時にコントローラクラスをロードしディスパッチテーブルを作ると同時にそれをキャッシュします。二回目以降のアクセスではキャッシュされたディスパッチテーブルをロードしそれを使用するため、コントローラにおいても遅延ロードが機能するように設計されています。

=head2 二つのセットアップ方式

遅延ロードは CGI で使用する場合には優れた機能なのですが、永続プロセスでも遅延ロードを行うとロード時のオーバーヘッドが逆にパフォーマンスを劣化させる原因になってしまいます。

とくに prefork な永続プロセスで遅延ロードを行うと Copy on Write によるプロセス間のメモリ共有の恩恵をうけられなくなるという欠点もあります。

そのため Ark では永続プロセスとそうでない場合に対応する二種類のセットアップ方式 (setup and setup_minimal )を持ちます。

    my $app = MyApp->new;
    $app->setup;

とするのが永続プロセス用。

    my $app = MyApp->new;
    $app->setup_minimal;

とするのが CGI 用のセットアップです。

=head1 どのような人が使うといいのか

下記のいずれかに該当する場合、Ark を選択すると幸せになれるかもしれません。

=over 4

=item Catalyst に慣れ親しんでいる人

Ark は Catalyst を参考にして開発されているので、Catalyst と同じような書き方をすることができますので、
Catalyst の経験のある人はスムーズに移行することが可能です。

=item CGI で使用することを考えている人

Ark は CGI でも実用的なスピードで動作するように開発されています。 Catalyst を使いたいけど CGI だと実用的ではない、という人のためのフレームワークになっています。

=item CGI でも FastCGI/mod_perl でもどちらの環境でも使用する場合がある人

Ark を使って開発していれば、 CGI でも FastCGI/mod_perl でもどちらの環境でもコードを変更することなく動かすことが可能です。

「最初は CGI でサービスを公開しアクセスが増えてきたら FastCGI に切り替えたい」とか、「FastCGI で運用していたサービスだけどアクセスが思ったよりないので CGI で動かしてサーバーリソースを節約したい」というような場合 Ark を使用していると簡単に動作環境を変更することができます。

=item 日本語ドキュメントが欲しいという人

Ark は日本人が開発しているため、ドキュメントは日本語のものが一番充実しています。
（なお、現在日本語以外のドキュメントはありません :P）

=back

=head1 その他のフレームワーク

Perl 製のその他のフレームワークと Ark との違いは以下のようになります。

=over 4

=item L<Catalyst>

Ark が強く影響をうけたフレームワークです。 コントローラの書き方など Ark と共通の部分が多くあります。

Ark との違いは Catalyst は CGI で実用的に動作しないという点です。逆に言えば CGI 環境を考えないのであれば Catalyst は長年をかけてそろった豊富なテストケースからくる安定性や、充実の周辺ライブラリもあり, 一押しのフレームワークと言えます。

=item L<NanoA|http://kazuho.31tools.com/nanoa/>, L<MENTA|http://gp.ath.cx/menta/>, L<Yacafi|http://blog.yappo.jp/yappo/archives/000618.html>

これらは CGI 環境に最適化された小さなフレームワークです。 CGI での速度を重視したいならこれらのフレームワークを検討してみると良いかもしれません。

Ark は CGI 環境下での遅延ロードという概念においては NanoA の影響を受けて開発されています。

=back

=head1 AUTHOR

Daisuke Murase <typester@cpan.org>

=head1 COPYRIGHT & LICENSE

Copyright (c) 2009 KAYAC Inc. All rights reserved.

This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the LICENSE file included with this module.

=cut
