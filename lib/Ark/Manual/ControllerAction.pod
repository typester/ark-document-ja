=encoding utf-8

=head1 NAME

Ark::Manual::ControllerAction - コントローラとアクション

=head1 DESCRIPTION

コントローラはリクエストを処理し、適切なviewやmodelに処理を振り分ける役割のクラスです。

コントローラはURLにひも付けされたアクションを持ちます。これはコントローラオブジェクトのメソッドの一つですが、URLにひもづけられているという点でメソッドとは異なります。

=head1 コントローラ

コントローラはアプリケーションの C<Controller> ディレクトリ以下に作成する必要があります。Ark はこのディレクトリ以下のファイルを自動的にロードします。

Fooという名前のコントローラを作るには

    package MyApp::Controller::Foo;
    use Ark 'Controller';
    
    1;

などと書きます。

この中にアクションを定義します。


=head1 アクション

アクションには大きく分けて、

=over 4

=item *

Path アクション

=item *

Regex アクション

=item *

Chained アクション

=back

の三つがあります。

=head2 Path アクション

Path アクションはその名の通りリクエストされたURLのパス部分をもとに作られるアクションです。

アクションは

    package MyApp::Controller::Foo;
    use Ark 'Controller';
    
    sub bar :Path('bar') {
        my ($self, $c) = @_;
    }
    
    1;

というようにメソッドに C<:Path> などのようなアトリビュートをつけて定義します。

Path アクションで使用可能なアトリビュートは後述しますが、一番の基本になるのが :Path アトリビュートです。

上記の bar アクションは

    /foo/bar

というURLにマッチします。/foo がコントローラの名前空間で、それ以下の bar というパスにマッチする。という意味です。

このアクションで

    sub bar :Path {
    }

という風に定義を変えると

    /foo

というURLにマッチするようになります。

コントローラに名前空間があるのに戸惑うかもしれません。トップレベルの名前空間をつくるにはどうしたらいいのでしょうか？

それはコントローラクラスの設定を以下のように変更して行います。

    package MyApp::Controller::Root;
    use Ark 'Controller';
    
    has '+namespace' => default => '';
    
    1;

これでこの Root コントローラはトップレベルの名前空間を持つようになります。

トップレベルのコントローラには慣習として、RootやIndexなどのわかりやすい名前をつけるのをおすすめします。(ArkのデフォルトはRootです)

さて、Pathアクションのその他のアトリビュートも見てみましょう。基本的にPathアクションの他のアトリビュートはすべて :Path アトリビュートで置き換え可能なものになっていますので、:Path アトリビュートとの対比で説明します。

=over 4

=item Localアクション

    sub foo :Local {}
    sub foo :Path('foo') {}

名前空間以下にメソッド名でPathをつくるときに、Pathアトリビュートにメソッド名をわたすのを省略できるアトリビュートです。

=item Globalアクション

    sub foo :Global {}
    sub foo :Path('/foo') {}

メソッド名のPathをトップレベルパスにマッチするアクションをつくることができるショートカットです。

=back

そして、最後にオプションのアトリビュートとして :Args アトリビュートというものがあります。

これはアクションパス以降のパスを引数として受け取れるアトリビュートです。

    sub foo :Global :Args(1) {
        my ($self, $c, $arg1) = @_;
    }

というように引数の数を指定します。

この場合は C</foo/*> というURLにマッチし、C<*> の部分が C<$arg1> として渡されます。

    sub foo :Global :Args {
        my ($self, $c, @args) = @_;
    }

というように引数の数の指定を省略するとすべての引数を取得します。

つまりこのアクションは C<foo/*/*/*/....> というようなURLにすべてマッチします。

=head2 Regex アクション

正規表現を使用したアクションです。

    sub foo :Regex('^/foo/') {}

などと正規表現を指定するとそれにマッチしたURLでアクションが呼ばれます。

この場合、正規表現マッチは引数として渡されます。

    sub day :Regex('^/archives/(\d{4})/(\d{2})/(\d{2})') {
        my ($self, $c, $year, $month, $day) = @_;
    }

というイメージになります。

またこのアクションはすべてグローバルなものになります。

コントローラの名前空間以降でのみマッチさせたい場合は C<LocalRegex> アトリビュートというのも使用することができます。

=head2 Chained アクション

複数のアクションをつないで一つのURLをつくるという、少し複雑なアクションです。

これをつかうと以下のような複雑なURLのためのアクションを作成することが可能になります。

    /user/{user}/profile

これを実装すると以下のようになります。

    sub user :Chained('/') :PathPart :CaptureArgs(1) {
        my ($self, $c, $user) = @_;
        $c->stash->{user} = $user;
    }
    
    sub user_profile :Chained('user') :PathPart('profile') :Args(0) {
        my ($self, $c) = @_;
    
    }

